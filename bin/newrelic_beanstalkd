#! /usr/bin/env ruby

require 'rubygems'
require 'newrelic_plugin'
require 'beaneater'

module BeanstalkdPlugin
  class Agent < NewRelic::Plugin::Agent::Base
    agent_guid 'io.joos.newrelic.plugin.beanstalkd'
    agent_version '0.0.1'
    agent_config_options :name, :host, :port

    def initialize context, options = {}
      options[:name] ||= 'Beanstalkd'
      options[:host] ||= 'localhost'
      options[:port] ||= 11300

      super
    end

    agent_human_labels('Beanstalkd') do
      "#{@name} (#{@host}:#{@port})"
    end

    def poll_cycle
      beanstalkd = Beaneater::Pool.new(["#{@host}:#{@port}"])

      tubes = beanstalkd.tubes.all

      tubes.each do |tube|
        report_tube tube.stats
      end

      report_server beanstalkd.stats

      beanstalkd.close
    end

    def report_tube(stats)
      report_tube_metrics "Tubes/#{stats['name']}", stats
    end

    def report_server(stats)
      report_server_metrics "Server/#{stats['name']}", stats
    end

    def report_tube_metrics(metric, stats)
      metric_name = "Beanstalkd/#{metric}"

      percent_busy = stats[:current_watching] > 0 ? (stats[:current_jobs_reserved] / stats[:current_watching]) * 100 : 0
      percent_idle = 100 - percent_busy

      report_metric metric_name, 'UrgentJobs', stats[:current_jobs_urgent]
      report_metric metric_name, 'IdleJobs', stats[:current_jobs_ready]
      report_metric metric_name, 'RunningJobs', stats[:current_jobs_reserved]
      report_metric metric_name, 'DelayedJobs', stats[:current_jobs_delayed]
      report_metric metric_name, 'BuriedJobs', stats[:current_jobs_buried]
      report_metric metric_name, 'TotalJobs', stats[:total_jobs]
      report_metric metric_name, 'BusyWorkers', stats[:current_using]
      report_metric metric_name, 'WaitingWorkers', stats[:current_waiting]
      report_metric metric_name, 'TotalWorkers', stats[:current_watching]
      report_metric metric_name, 'IdleJobsPerWorker', (stats[:current_jobs_ready] / stats[:current_watching]) if stats[:current_watching] > 0
      report_metric metric_name, 'PercentBusyWorkers', percent_busy
      report_metric metric_name, 'PercentIdleWorkers', percent_idle
      report_metric metric_name, 'WaitTime', percent_idle > 0 ? percent_busy / percent_idle : 100
    end

    def report_server_metrics(metric, stats)
      metric_name = "Beanstalkd/#{metric}"

      percent_busy = stats[:current_workers] > 0 ? (stats[:current_jobs_reserved] / stats[:current_workers]) * 100 : 0
      percent_idle = 100 - percent_busy

      report_metric metric_name, 'UrgentJobs', stats[:current_jobs_urgent]
      report_metric metric_name, 'IdleJobs', stats[:current_jobs_ready]
      report_metric metric_name, 'RunningJobs', stats[:current_jobs_reserved]
      report_metric metric_name, 'DelayedJobs', stats[:current_jobs_delayed]
      report_metric metric_name, 'BuriedJobs', stats[:current_jobs_buried]
      report_metric metric_name, 'TotalJobs', stats[:total_jobs]
      report_metric metric_name, 'Tubes', stats[:current_tubes]
      report_metric metric_name, 'CurrentConnections', stats[:current_connections]
      report_metric metric_name, 'CurrentProducers', stats[:current_producers]
      report_metric metric_name, 'CurrentWorkers', stats[:current_workers]
      report_metric metric_name, 'WaitingWorkers', stats[:current_waiting]
      report_metric metric_name, 'Uptime', stats[:uptime]
      report_metric metric_name, 'PercentBusyWorkers', percent_busy
      report_metric metric_name, 'PercentIdleWorkers', percent_idle
      report_metric metric_name, 'WaitTime', percent_idle > 0 ? percent_busy / percent_idle : 100
    end
  end

  #
  # Register the agent with the component
  #
  NewRelic::Plugin::Setup.install_agent :beanstalkd, self

  #
  # Launch the agent
  #
  NewRelic::Plugin::Run.setup_and_run
end